// Fill out your copyright notice in the Description page of Project Settings.


#include "SerialPortCore.h"

using namespace std;

UINT SerialPort::GetBytesInCOM()
{
	DWORD dwError = 0;  /** 错误码 */
	COMSTAT  comstat;   /** COMSTAT结构体,记录通信设备的状态信息 */
	memset(&comstat, 0, sizeof(COMSTAT));

	UINT BytesInQue = 0;
	/** 在调用ReadFile和WriteFile之前,通过本函数清除以前遗留的错误标志 */
	if (ClearCommError(hComm, &dwError, &comstat))
	{
		BytesInQue = comstat.cbInQue; /** 获取在输入缓冲区中的字节数 */
	}

	return BytesInQue;
}

	//读取串口接收缓冲区中一个字节的数据
bool SerialPort::ReadChar(unsigned char& cRecved)
{
	BOOL  bResult = TRUE;
	DWORD BytesRead = 0;
	if (hComm == INVALID_HANDLE_VALUE)
	{
		return false;
	}

	/** 临界区保护 */
	EnterCriticalSection(&csCommunicationSync);

	/** 从缓冲区读取一个字节的数据 */
	bResult = ReadFile(hComm, &cRecved, 1, &BytesRead, NULL);
	if ((!bResult))
	{
		/** 获取错误码,可以根据该错误码查出错误原因 */
		DWORD dwError = GetLastError();

		/** 清空串口缓冲区 */
		PurgeComm(hComm, PURGE_RXCLEAR | PURGE_RXABORT);
		LeaveCriticalSection(&csCommunicationSync);

		return false;
	}

	/** 离开临界区 */
	LeaveCriticalSection(&csCommunicationSync);

	return (BytesRead == 1);
}

bool SerialPort::OpenPort(UINT portNo)
{
	/** 进入临界段 */
	EnterCriticalSection(&csCommunicationSync);

	/** 把串口的编号转换为设备名 */
	char szPort[50];
	sprintf_s(szPort, "COM%d", portNo);

	/** 打开指定的串口 */
	hComm = CreateFileA(szPort,  /** 设备名,COM1,COM2等 */
		GENERIC_READ | GENERIC_WRITE, /** 访问模式,可同时读写 */
		0,                            /** 共享模式,0表示不共享 */
		NULL,                         /** 安全性设置,一般使用NULL */
		OPEN_EXISTING,                /** 该参数表示设备必须存在,否则创建失败 */
		0,
		0);

	/** 如果打开失败，释放资源并返回 */
	if (hComm == INVALID_HANDLE_VALUE)
	{
		LeaveCriticalSection(&csCommunicationSync);
		return false;
	}

	/** 退出临界区 */
	LeaveCriticalSection(&csCommunicationSync);

	return true;
}
void SerialPort::ClosePort() {
	/** 如果有串口被打开，关闭它 */
	if (hComm != INVALID_HANDLE_VALUE)
	{
		CloseHandle(hComm);
		hComm = INVALID_HANDLE_VALUE;
	}
}
UINT SerialPort::ListenThread(void* pParam)
{
	SerialPort* port = reinterpret_cast<SerialPort*>(pParam);
	// 线程循环,轮询方式读取串口数据  
	while (!port->bExit)
	{
		UINT BytesInQue = port->GetBytesInCOM();
		/** 如果串口输入缓冲区中无数据,则休息一会再查询 */
		if (BytesInQue == 0)
		{
			Sleep(port->SleepTimeInterval);
			continue;
		}

		/** 读取输入缓冲区中的数据并输出显示 */
		unsigned char cRecved = 0x00;
		do
		{
			cRecved = 0x00;
			if (port->ReadChar(cRecved) == true)
			{

				std::stringstream  ss;
				int tm = cRecved;
				ss << std::hex << std::setw(2) << std::setfill('0') << tm;
				ss << " ";
				string a = ss.str();
				string b;
				transform(a.begin(), a.end(), back_inserter(b), ::toupper);
				//执行绑定的委托
				if (port->DelegateObject && port->DelegateFunc)
					port->DelegateFunc(port->DelegateObject, b);
				continue;
			}
		} while (--BytesInQue);
	}

	return 0;
}
bool SerialPort::OpenListenThread(UINT sleepTimeInterval)
{
	SleepTimeInterval = sleepTimeInterval;
	/** 检测线程是否已经开启了 */
	if (hListenThread != INVALID_HANDLE_VALUE)
	{
		/** 线程已经开启 */
		return false;
	}
	bExit = false;

	UINT threadId;
	/** 开启串口数据监听线程 */
	hListenThread = (HANDLE)_beginthreadex(NULL, 0, SerialPort::ListenThread, this, 0, &threadId);
	if (!hListenThread)
	{
		return false;
	}
	/** 设置线程的优先级,高于普通线程 */
	if (!SetThreadPriority(hListenThread, THREAD_PRIORITY_ABOVE_NORMAL))
	{
		return false;
	}

	return true;
}

bool SerialPort::CloseListenThread()
{
	SleepTimeInterval = 0;
	if (hListenThread != INVALID_HANDLE_VALUE)
	{
		/** 通知线程退出 */
		bExit = true;

		/** 等待线程退出 */
		Sleep(10);

		/** 置线程句柄无效 */
		CloseHandle(hListenThread);
		hListenThread = INVALID_HANDLE_VALUE;
	}
	return true;
}

SerialPort::SerialPort() {
	hComm = INVALID_HANDLE_VALUE;
	hListenThread = INVALID_HANDLE_VALUE;
	InitializeCriticalSection(&csCommunicationSync);
}

bool SerialPort::InitPort(UINT  portNo, UINT  baud, char  parity, UINT  databits, UINT  stopsbits, DWORD dwCommEvents) {

	/** 临时变量,将制定参数转化为字符串形式,以构造DCB结构 */
	char szDCBparam[50];
	sprintf_s(szDCBparam, "baud=%d parity=%c data=%d stop=%d", baud, parity, databits, stopsbits);

	/** 打开指定串口,该函数内部已经有临界区保护,上面请不要加保护 */
	if (!OpenPort(portNo))
	{
		return false;
	}

	/** 进入临界段 */
	EnterCriticalSection(&csCommunicationSync);

	/** 是否有错误发生 */
	BOOL bIsSuccess = TRUE;

	/** 在此可以设置输入输出的缓冲区大小,如果不设置,则系统会设置默认值.
	*  自己设置缓冲区大小时,要注意设置稍大一些,避免缓冲区溢出
	*/
	/*if (bIsSuccess )
	{
	bIsSuccess = SetupComm(m_hComm,10,10);
	}*/

	/** 设置串口的超时时间,均设为0,表示不使用超时限制 */
	COMMTIMEOUTS  CommTimeouts;
	CommTimeouts.ReadIntervalTimeout = 0;
	CommTimeouts.ReadTotalTimeoutMultiplier = 0;
	CommTimeouts.ReadTotalTimeoutConstant = 0;
	CommTimeouts.WriteTotalTimeoutMultiplier = 0;
	CommTimeouts.WriteTotalTimeoutConstant = 0;
	if (bIsSuccess)
	{
		bIsSuccess = SetCommTimeouts(hComm, &CommTimeouts);
	}

	DCB  dcb;
	if (bIsSuccess)
	{
		// 将ANSI字符串转换为UNICODE字符串  
		DWORD dwNum = MultiByteToWideChar(CP_ACP, 0, szDCBparam, -1, NULL, 0);
		wchar_t* pwText = new wchar_t[dwNum];
		if (!MultiByteToWideChar(CP_ACP, 0, szDCBparam, -1, pwText, dwNum))
		{
			bIsSuccess = TRUE;
		}

		/** 获取当前串口配置参数,并且构造串口DCB参数 */
		bIsSuccess = GetCommState(hComm, &dcb) && BuildCommDCB(pwText, &dcb);
		/** 开启RTS flow控制 */
		dcb.fRtsControl = RTS_CONTROL_ENABLE;

		/** 释放内存空间 */
		delete[] pwText;
	}

	if (bIsSuccess)
	{
		/** 使用DCB参数配置串口状态 */
		bIsSuccess = SetCommState(hComm, &dcb);
	}

	/**  清空串口缓冲区 */
	PurgeComm(hComm, PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT);

	/** 离开临界段 */
	LeaveCriticalSection(&csCommunicationSync);

	return bIsSuccess == TRUE;

}

bool SerialPort::WriteData(unsigned char* pData, int length)
{
	BOOL   bResult = TRUE;
	DWORD  BytesToSend = 0;
	if (hComm == INVALID_HANDLE_VALUE)
	{
		return false;
	}

	/** 临界区保护 */
	EnterCriticalSection(&csCommunicationSync);

	/** 向缓冲区写入指定量的数据 */
	bResult = WriteFile(hComm,/*文件句柄*/pData,/*用于保存读入数据的一个缓冲区*/ length,/*要读入的字符数*/ &BytesToSend,/*指向实际读取字节数的指针*/ NULL);
	if (!bResult)
	{
		DWORD dwError = GetLastError();
		/** 清空串口缓冲区 */
		PurgeComm(hComm, PURGE_RXCLEAR | PURGE_RXABORT);
		LeaveCriticalSection(&csCommunicationSync);

		return false;
	}

	/** 离开临界区 */
	LeaveCriticalSection(&csCommunicationSync);

	return true;
}

SerialPort::~SerialPort()
{
	CloseListenThread();
	ClosePort();
	DeleteCriticalSection(&csCommunicationSync);
}

void SerialPort::BindToListenThread(void* obj, void(*func)(void*, string)) {
	DelegateFunc = func;
	DelegateObject = obj;
}

void SerialPort::ClearListenThreadDelegate() {
	DelegateFunc = nullptr;
	DelegateObject = nullptr;
}

bool SerialPort::IsPortOpened() const {
	return !(hComm == INVALID_HANDLE_VALUE);
}

bool SerialPort::IsListenThreadOpened() const {
	return !(hListenThread == INVALID_HANDLE_VALUE);
}
